// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OmcSales.API.Models;

namespace OmcSales.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200609105328_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("OilBackend.Models.FillingStation", b =>
                {
                    b.Property<int>("FillingStationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("FillingStationId");

                    b.ToTable("FillingStation");
                });

            modelBuilder.Entity("OilBackend.Models.Nozzle", b =>
                {
                    b.Property<int>("NozzleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PumpId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NozzleId");

                    b.HasIndex("PumpId");

                    b.ToTable("Nozzle");
                });

            modelBuilder.Entity("OilBackend.Models.NozzleValue", b =>
                {
                    b.Property<int>("NozzleValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("NozzleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("closing")
                        .HasColumnType("INTEGER");

                    b.Property<int>("opening")
                        .HasColumnType("INTEGER");

                    b.HasKey("NozzleValueId");

                    b.HasIndex("NozzleId");

                    b.ToTable("NozzleValue");
                });

            modelBuilder.Entity("OilBackend.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductName")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("StationId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OilBackend.Models.ProductPrice", b =>
                {
                    b.Property<int>("ProductPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductPriceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("OilBackend.Models.Pump", b =>
                {
                    b.Property<int>("PumpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AttendantName")
                        .HasColumnType("TEXT");

                    b.Property<int>("StationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PumpId");

                    b.HasIndex("StationId");

                    b.ToTable("Pump");
                });

            modelBuilder.Entity("OilBackend.Models.Tank", b =>
                {
                    b.Property<int>("TankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TankName")
                        .HasColumnType("TEXT");

                    b.HasKey("TankId");

                    b.ToTable("Tank");
                });

            modelBuilder.Entity("OilBackend.Models.TankValue", b =>
                {
                    b.Property<int>("TankValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Closing")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("Deliveredproduct")
                        .HasColumnType("REAL");

                    b.Property<float>("Opening")
                        .HasColumnType("REAL");

                    b.Property<float>("RTT")
                        .HasColumnType("REAL");

                    b.Property<int>("TankId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TankValueId");

                    b.HasIndex("TankId");

                    b.ToTable("TankValue");
                });

            modelBuilder.Entity("OmcSales.API.Models.ProductBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductBank");
                });

            modelBuilder.Entity("OilBackend.Models.Nozzle", b =>
                {
                    b.HasOne("OilBackend.Models.Pump", "Pump")
                        .WithMany("Nozzles")
                        .HasForeignKey("PumpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OilBackend.Models.NozzleValue", b =>
                {
                    b.HasOne("OilBackend.Models.Nozzle", "Nozzle")
                        .WithMany("NozzleValues")
                        .HasForeignKey("NozzleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OilBackend.Models.Product", b =>
                {
                    b.HasOne("OilBackend.Models.FillingStation", "Station")
                        .WithMany("Products")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OilBackend.Models.ProductPrice", b =>
                {
                    b.HasOne("OilBackend.Models.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OilBackend.Models.Pump", b =>
                {
                    b.HasOne("OilBackend.Models.FillingStation", "FillingStation")
                        .WithMany("Pumps")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OilBackend.Models.TankValue", b =>
                {
                    b.HasOne("OilBackend.Models.Tank", "Tank")
                        .WithMany("Tankvalues")
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
